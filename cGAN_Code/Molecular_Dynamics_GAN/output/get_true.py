##
# Read Dataset
##
import glob
import numpy as np
import torch

files = glob.glob('./../../All_ML_Training_Data/210905_SMD_decaalanine/SMD/output/raw_npy_traj/*.npy')

dataset = []

end_to_end_distance = dict()
for i in range(1002):
    end_to_end_distance[i] = []

time_step = 50
data = []
#print(len(files))
files = [files[0]]
for file_ in files:
    X_positions = np.load(file_)

    X = X_positions

    X = X[::10]

    # Create Training dataset from this sequence
    #print(X.shape[0])-> 1002
    for frame_num in range(X.shape[0]):
        if frame_num % time_step == 0:
            data.append(torch.tensor(X[frame_num,:,:]))

data = torch.stack(data)
data = data.cpu().detach().numpy()
frame_num = data.shape[0]

nAtoms = "104"
outName = "True.xyz"
with open(outName, "w") as outputfile:
    for frame_idx in range(frame_num):
        
        frame = data[frame_idx]
        outputfile.write(str(nAtoms) + "\n")
        outputfile.write(" generated by JK\n")

        atomType = "CA"
        for i in range(104):
            line = str(frame[i][0]) + " " + str(frame[i][1]) + " " + str(frame[i][2]) + " "
            line += "\n"
            outputfile.write("  " + atomType + "\t" + line)

print("=> Finished Generation <=")